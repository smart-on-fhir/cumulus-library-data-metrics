{% import 'utils.jinja' as utils %}

-- Extracts the right display codes to use (semicolon separated).
-- May contain missing rows, so you'll need to coalesce results.
-- http://hl7.org/fhir/us/core/STU4/StructureDefinition-us-core-ethnicity.html
{% macro extract_ethnicity(schema) -%}
(
{% set has_extension_codes = (
    schema["extension"]["url"]
    and schema["extension"]["extension"]["url"]
    and schema["extension"]["extension"]["valueCoding"]["code"]
    and schema["extension"]["extension"]["valueCoding"]["system"]
) %}
{% if has_extension_codes %}
    WITH flattened_ethnicity AS (
        SELECT
            src.id,

            CASE
            WHEN c.ext.valuecoding.code = '2135-2' AND c.ext.valuecoding.system = 'urn:oid:2.16.840.1.113883.6.238'
            THEN 'Hispanic or Latino'
            WHEN c.ext.valuecoding.code = '2186-5' AND c.ext.valuecoding.system = 'urn:oid:2.16.840.1.113883.6.238'
            THEN 'Non Hispanic or Latino'
            ELSE NULL -- this binding is required to be just the above values, ignore all else
            END AS display
        FROM
            patient AS src,
            UNNEST(extension) AS p (ext),
            UNNEST(p.ext.extension) AS c (ext)
        WHERE
            p.ext.url = 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity'
            AND c.ext.url = 'ombCategory'
            AND c.ext.valuecoding.code IS NOT NULL
            AND c.ext.valuecoding.system IS NOT NULL
    )
    SELECT
        id,
        {% call utils.array_to_string() %}
          ARRAY_AGG(display)
        {% endcall %} AS display
    FROM flattened_ethnicity
    GROUP BY id
{% else %}
    SELECT id, '' AS display FROM patient WHERE 1=0  -- return an empty table
{% endif %}
)
{%- endmacro %}


-- Extracts the right display codes to use (semicolon separated).
-- May contain missing rows, so you'll need to coalesce results.
-- http://hl7.org/fhir/us/core/STU4/StructureDefinition-us-core-race.html
{% macro extract_race(schema) -%}
(
{% set has_extension_codes = (
    schema["extension"]["url"]
    and schema["extension"]["extension"]["url"]
    and schema["extension"]["extension"]["valueCoding"]["code"]
    and schema["extension"]["extension"]["valueCoding"]["system"]
) %}
{% if has_extension_codes %}
    WITH flattened_race AS (
        SELECT
            src.id,

            CASE
            WHEN c.ext.valuecoding.code = '1002-5' AND c.ext.valuecoding.system = 'urn:oid:2.16.840.1.113883.6.238'
            THEN 'American Indian or Alaska Native'
            WHEN c.ext.valuecoding.code = '2028-9' AND c.ext.valuecoding.system = 'urn:oid:2.16.840.1.113883.6.238'
            THEN 'Asian'
            WHEN c.ext.valuecoding.code = '2054-5' AND c.ext.valuecoding.system = 'urn:oid:2.16.840.1.113883.6.238'
            THEN 'Black or African American'
            WHEN c.ext.valuecoding.code = '2076-8' AND c.ext.valuecoding.system = 'urn:oid:2.16.840.1.113883.6.238'
            THEN 'Native Hawaiian or Other Pacific Islander'
            WHEN c.ext.valuecoding.code = '2106-3' AND c.ext.valuecoding.system = 'urn:oid:2.16.840.1.113883.6.238'
            THEN 'White'
            WHEN c.ext.valuecoding.code = 'UNK' AND c.ext.valuecoding.system = 'http://terminology.hl7.org/CodeSystem/v3-NullFlavor'
            THEN 'Unknown'
            WHEN c.ext.valuecoding.code = 'ASKU' AND c.ext.valuecoding.system = 'http://terminology.hl7.org/CodeSystem/v3-NullFlavor'
            THEN 'Asked but no answer'
            ELSE NULL -- this binding is required to be just the above values, ignore all else
            END AS display
        FROM
            patient AS src,
            UNNEST(extension) AS p (ext),
            UNNEST(p.ext.extension) AS c (ext)
        WHERE
            p.ext.url = 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-race'
            AND c.ext.url = 'ombCategory'
            AND c.ext.valuecoding.code IS NOT NULL
            AND c.ext.valuecoding.system IS NOT NULL
    )
    SELECT
        id,
        {% call utils.array_to_string() %}
          ARRAY_AGG(display)
        {% endcall %} AS display
    FROM flattened_race
    GROUP BY id
{% else %}
    SELECT id, '' AS display FROM patient WHERE 1=0  -- return an empty table
{% endif %}
)
{% endmacro %}


-- May contain missing rows, so you'll need to coalesce results.
-- http://hl7.org/fhir/us/core/STU4/StructureDefinition-us-core-birthsex.html
{% macro extract_birth_sex() -%}
(
    WITH flattened_birth_sex AS (
        SELECT
            src.id,

            CASE
            WHEN p.ext.valueCode = 'F'
            THEN 'Female'
            WHEN p.ext.valueCode = 'M'
            THEN 'Male'
            WHEN p.ext.valueCode = 'UNK'
            THEN 'Unknown'
            ELSE NULL -- this binding is required to be just the above values, ignore all else
            END AS display
        FROM
            patient AS src,
            UNNEST(extension) AS p (ext)
        WHERE
            p.ext.url = 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex'
    )
    SELECT
        id,
        {% call utils.array_to_string() %}
          ARRAY_AGG(display)
        {% endcall %} AS display
    FROM flattened_birth_sex
    GROUP BY id
)
{% endmacro %}
