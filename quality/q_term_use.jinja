{% import 'utils.jinja' as utils %}

CREATE TABLE quality__q_term_use_{{ src|lower }}_{{ field|lower }} AS (
WITH
src_status AS {{ utils.extract_status(src) }},

-- Flatten the coding and group the systems as an array
flattened_and_grouped AS (
    SELECT
        id,
        ARRAY_AGG(c.coding.system) AS systems
    FROM {{ src|lower }},
        UNNEST({{ field }}.coding) AS c (coding)
    GROUP BY id
),

-- Left join back to src to catch all rows, not just those with codings
rejoined_src AS (
    SELECT
        src.id,
        src_status.status,
        src.{{ field }},
        flattened_and_grouped.systems
    FROM {{ src|lower }} AS src
    LEFT JOIN src_status
    ON src.id = src_status.id
    LEFT JOIN flattened_and_grouped
    ON src.id = flattened_and_grouped.id
)

SELECT
    id,
    status,
    {{ field }}
FROM rejoined_src
WHERE
    systems is NULL
    OR ARRAY_POSITION(systems, '{{ system }}') = 0
);