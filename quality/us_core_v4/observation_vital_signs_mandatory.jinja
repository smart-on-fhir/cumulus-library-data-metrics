-- http://hl7.org/fhir/us/core/STU4/StructureDefinition-us-core-vital-signs.html
-- and also http://hl7.org/fhir/R4/vitalsigns.html?
--
-- The US Core profile links to that base FHIR profile. But that base FHIR profile seems...
-- unfinished? Like it talks about "Observation.related.type == 'has-member'" instead of the
-- Observation.hasMember field. Still, the base FHIR profile holds some constraints that do
-- seem to apply, like datetime must be at least to a day. (the labs US Core profile has that rule
-- too, but not the vitals US Core profile, presumably because it was already specified in this
-- parent profile)
--
-- There seem to also be some disagreements between the profiles. Like the base FHIR Vitals
-- profile says Observation.component.valueQuantity SHALL be UCUM. And in a separate
-- (less official?) text area, suggests that might also be true for for Observation.valueQuantity.
-- But then the US Core profile allows both to be an extensible binding to UCUM - so more of a
-- SHOULD then a SHALL. Where those conflicts exist, I've followed US Core.
--
-- But in general, this check does try to follow both profiles' constraints.

{% import 'us_core_v4/observation_utils.jinja' as obs_utils %}

WITH
tmp_slice AS {{ obs_utils.extract_category_slice(src, category) }},

tmp_grouped_checks AS (
    SELECT
        src.id,

        -- vs-3: each component must have value or a dataAbsentReason
        BOOL_AND(
            c.component IS NULL
            {% if has_comp_data_absent %}
                OR {{ utils.is_concept_valid('c.component.dataAbsentReason') }}
            {% endif %}
            OR {{ obs_utils.is_value_valid('c.component.value') }}
        ) AS valid_vs_3,

        -- obs-3: referenceRange must have at least a low or a high or text
        -- (This is a basic FHIR constraint, but the profile re-iterates it, so let's check it)
        BOOL_AND(
            r.referenceRange IS NULL
            {% if has_ref_range_low %}
                OR r.referenceRange.low IS NOT NULL
            {% endif %}
            {% if has_ref_range_high %}
                OR r.referenceRange.high IS NOT NULL
            {% endif %}
            OR {{ utils.is_string_valid('r.referenceRange.text') }}
        ) AS valid_obs_3

    FROM tmp_slice AS src,
        UNNEST(component) AS c (component),
        UNNEST(referenceRange) AS r (referenceRange)
    GROUP BY src.id
),

tmp_simplified AS (
    SELECT
        src.id,
        status IS NOT NULL AS valid_status,
        {{ utils.is_concept_valid('code') }} AS valid_code,
        {{ utils.is_reference_of_type('subject', 'Patient') }} AS valid_subject,
        (
            effectiveDateTime IS NOT NULL
            OR {{ utils.is_period_valid('effectivePeriod') }}
        ) AS valid_effective,
        -- vs-1: DateTime must be at least to day (ed: no mention of effectivePeriod...)
        (
            effectiveDateTime IS NULL
            OR LENGTH(effectiveDateTime) >= 10  -- YYYY-MM-DD
        ) AS valid_vs_1,
        -- vs-2: If there is no component or hasMember element then
        -- either a value[x] or a data absent reason must be present
        (
            component IS NOT NULL
            OR hasMember IS NOT NULL
            OR {{ utils.is_concept_valid('dataAbsentReason') }}
            OR {{ obs_utils.is_value_valid('value') }}
        ) AS valid_vs_2,
        -- vs-3: each component must have value or a dataAbsentReason
        (
            tmp_grouped_checks.valid_vs_3 IS NULL
            OR tmp_grouped_checks.valid_vs_3
        ) AS valid_vs_3,
        -- obs-3: referenceRange must have at least a low or a high or text
        -- (This is a basic FHIR constraint, but the profile re-iterates it, so let's check it)
        (
            tmp_grouped_checks.valid_obs_3 IS NULL
            OR tmp_grouped_checks.valid_obs_3
        ) AS valid_obs_3
    FROM tmp_slice AS src
    LEFT JOIN tmp_grouped_checks
    ON tmp_grouped_checks.id = src.id
)

{%
set fields = [
    'valid_status',
    'valid_code',
    'valid_subject',
    'valid_effective',
    'valid_vs_1',
    'valid_vs_2',
    'valid_vs_3',
    'valid_obs_3',
]
%}

SELECT
    id,
    {{ fields|join(", ") }},
    {{ fields|join(" AND ") }} AS valid
FROM tmp_simplified
