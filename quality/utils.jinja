-- Extracts the codes from a codeableConcept and returns a select with (id, codes).
{% macro extract_codes(src, src_field, system=null, is_array=false) -%}
(
    -- Support both a list of systems or a single system
    {%- if system is string %}
        {%- set system_list = "('" + system + "')" %}
    {%- elif system %}
        {%- set system_list = "('" + system|join("', '") + "')" %}
    {%- endif %}

    -- Flatten codings of the provided system and recombine the codes as a list
    SELECT
        id,
        ARRAY_AGG(c.coding.code) AS codes
    FROM {{ src }},
        {%- if is_array %}
        UNNEST({{ src_field }}) AS cc (cc_row),
        UNNEST(cc.cc_row.coding) AS c (coding)
        {%- else %}
        UNNEST({{ src_field }}.coding) AS c (coding)
        {%- endif %}
    {% if system_list %}
    WHERE
        c.coding.system in {{ system_list }}
    {% endif %}
    GROUP BY id
)
{%- endmacro %}


-- Extracts the codes from a codeableConcept and returns a flat select with (id, code).
{% macro extract_codes_flat(src, src_field, system=null, is_array=false) -%}
(
    -- Support both a list of systems or a single system
    {%- if system is string %}
        {%- set system_list = "('" + system + "')" %}
    {%- elif system %}
        {%- set system_list = "('" + system|join("', '") + "')" %}
    {%- endif %}

    -- Flatten codings of the provided system and recombine the codes as a list
    SELECT
        id,
        c.coding.code AS code
    FROM {{ src }},
        {%- if is_array %}
        UNNEST({{ src_field }}) AS cc (cc_row),
        UNNEST(cc.cc_row.coding) AS c (coding)
        {%- else %}
        UNNEST({{ src_field }}.coding) AS c (coding)
        {%- endif %}
    {% if system_list %}
    WHERE
        c.coding.system in {{ system_list }}
    {% endif %}
)
{%- endmacro %}


-- Extracts the status field and returns a select with (id, status).
{% macro extract_status(src) -%}
(
    -- Annoyingly, allergies and conditions use a codeableConcept field.
    {% set systems = {
        'AllergyIntolerance': 'http://terminology.hl7.org/CodeSystem/allergyintolerance-verification',
        'Condition': 'http://terminology.hl7.org/CodeSystem/condition-ver-status',
    } %}

    -- Check what kind of resource we are dealing with
    {% if src in systems %}
        {% set join_table = src + '_extract_status_tmp_codes' %}
        WITH {{ join_table }} AS {{ extract_codes(src, 'verificationstatus', system=systems[src]) }}
    {%- endif %}

    -- Now extract the status
    SELECT
        src.id,
        {% if join_table %}
        ARRAY_JOIN(ARRAY_SORT(join_table.codes), '; ')

        {% elif src == 'Patient' %}
        {{ patient_active_status() }}

        {% else %}
        status
        {%- endif %}

        AS status
    FROM {{ src }} AS src

    {%- if join_table %}
    JOIN {{ join_table }} AS join_table
    ON src.id = join_table.id
    {%- endif %}
)
{%- endmacro %}


-- Extracts a date field from a list of choices, chops it to the period, and returns a string.
{% macro get_date(dates, period) -%}
    {% call coalesce_missing() %}
        SUBSTR(
            CAST(date_trunc('{{ period }}', date(from_iso8601_timestamp(
                COALESCE(
                    {{ dates|join(', ') }}
                )
            ))) AS VARCHAR),
            1,
            {% if period == 'year' %} 4 {% else %} 7 {% endif %}
        )
    {% endcall %}
{%- endmacro %}


{% macro coalesce_missing() -%}
    {% if varargs %}
        {% set arg = varargs[0] %}
    {% else %}
        {% set arg = caller() %}
    {% endif %}

    COALESCE(
        {{ arg }},
        'missing-or-null'
    )
{%- endmacro %}


{% macro patient_active_status() -%}
    CASE WHEN active IS NULL
    THEN NULL
    ELSE
        CASE WHEN active
        THEN 'active'
        ELSE 'inactive'
        END
    END
{%- endmacro %}


{% macro is_reference_of_type(field, type) -%}
(
    {{ field }} IS NOT NULL
    AND (
        ({{ field }}.reference IS NOT NULL AND {{ field }}.reference LIKE '{{ type }}/%')
        -- TODO: Should we allow this form? FHIR spec says yes... but not sure our SQL allows it
        -- OR ({{ field }}.type IS NOT NULL AND {{ field }}.type = {{ type }})
    )
)
{%- endmacro %}


-- Converts an array to a semicolon-delineated list, or missing-or-null
-- Can be called with the name of the array to check ('list_field')
-- or wrapped in a call block
{% macro array_to_string() -%}
    {% if varargs %}
        {% set arg = varargs[0] %}
    {% else %}
        {% set arg = caller() %}
    {% endif %}

    {% call coalesce_missing() %}
        -- Use nullif to catch empty arrays being joined into the empty string
        NULLIF(ARRAY_JOIN(ARRAY_SORT({{ arg }}), '; '), '')
    {% endcall %}
{%- endmacro %}


-- Checks for NULL, '', and '\u0000' strings.
-- Can be called with the name of the array to check ('list_field')
-- or wrapped in a call block
{% macro is_string_empty() -%}
(
    {% if varargs %}
        {% set arg = varargs[0] %}
    {% else %}
        {% set arg = caller() %}
    {% endif %}

    {{ arg }} IS NULL
    OR {{ arg }} = ''
    -- We've seen Cerner give back strings with just a single NUL char, so check for that too
    OR {{ arg }} = CHR(0)
)
{%- endmacro %}


-- ** These next few macros check if an element is filled in.
-- This is useful because some toplevel columns can be represented as present but with all nulls
-- for the subfields instead of real data. That is, a CodeableConcept might look like
-- {id=null, coding=null, text=null} in Athena instead of NULL.
-- I'm not 100% on when that happens vs NULL - is there a difference for older data before
-- we had a broader schema? It doesn't seem to happen for lists of concepts, at least.
{% macro is_coding_valid(field) -%}
(
    {{ field }} IS NOT NULL
    AND (
        {{ field }}.code IS NOT NULL
        OR NOT {{ is_string_empty(field + '.display') }}
    )
)
{%- endmacro %}
{% macro is_concept_valid(field) -%}
(
    {{ field }} IS NOT NULL
    AND (
        {{ field }}.coding IS NOT NULL
        OR NOT {{ is_string_empty(field + '.text') }}
    )
)
{%- endmacro %}
{% macro is_period_valid(field) -%}
(
    {{ field }} IS NOT NULL
    AND (
        {{ field }}.start IS NOT NULL
        OR {{ field }}.end IS NOT NULL
    )
)
{%- endmacro %}
{% macro is_reference_valid(field) -%}
(
    {{ field }} IS NOT NULL
    AND (
        NOT {{ is_string_empty(field + '.reference') }}
        OR NOT {{ is_string_empty(field + '.display') }}
    )
)
{%- endmacro %}
