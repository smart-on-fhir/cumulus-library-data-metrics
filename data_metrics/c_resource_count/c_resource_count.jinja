{% import 'utils.jinja' as utils %}

CREATE TABLE data_metrics__count_c_resource_count_{{ src|lower }}_{{ period|lower }} AS (
{%- set orig_cat_field = cat_field %}
WITH
src_status AS {{ utils.extract_status(src) }},

{%- if cat_systems %}
-- Flatten categories of the provided system and recombine the codes as a list
extracted_codes AS {{ utils.extract_codes(src, cat_field, system=cat_systems, is_array=true) }},

-- Left join back to src to catch rows without a proper system category
grouped_category_src AS (
    SELECT src.*, extracted_codes.codes AS grouped_categories
    FROM {{ src }} AS src
    LEFT JOIN extracted_codes
    ON src.id = extracted_codes.id
),
{%- set src = 'grouped_category_src' %}
{%- set cat_field = 'grouped_categories' %}
{%- endif %}

simplified AS (
    SELECT
        src.id,

        -- Convert array of categories into one string, separated by semicolon
        {%- if orig_cat_field %}
        {{ utils.array_to_string(cat_field) }} AS {{ orig_cat_field }},
        {%- endif %}

        -- Parse string datetime into a single period string
        {% if dates %}
        {{ utils.get_date_string(dates, period) }} AS {{ period }},
        {% endif %}

        {% call utils.coalesce_missing() %}
            src_status.status
        {% endcall %} AS status
    FROM {{ src }} AS src
    LEFT JOIN src_status
    ON src.id = src_status.id
)

{% call utils.make_counts('simplified', output_mode) %}
    {%- if orig_cat_field %}
    {{ orig_cat_field }},
    {%- endif %}

    {%- if dates %}
    {{ period }},
    {%- endif %}

    status
{% endcall %}
);