-- http://hl7.org/fhir/us/core/STU4/StructureDefinition-us-core-documentreference.html

-- CUMULUS-QUIRK
-- Doesn't look at support for `identifier`, because Cumulus strips that field.

WITH

tmp_content_flat AS (
    SELECT
        id,

        {% if schema["content"]["format"] %}
        u.content.format
        {% else %}
        NULL AS format
        {% endif %}

    FROM {{ src }},
        UNNEST(content) AS u (content)
),
tmp_content_grouped AS (
    SELECT
        id,
        BOOL_AND({{ utils.is_coding_valid('format') }}) AS valid_format
    FROM tmp_content_flat
    GROUP BY id
),

tmp_encounters AS (
    SELECT
        id,

    {% if schema["context"]["encounter"] %}
        BOOL_AND({{ utils.is_reference_of_type('u.encounter', 'Encounter') }}) as valid_encounter,
        COUNT(u.encounter) AS encounter_count

    FROM {{ src }},
        UNNEST(context.encounter) AS u (encounter)
    GROUP BY id

    {% else %}
        FALSE AS valid_encounter,
        0 AS encounter_count
    FROM {{ src }}
    {% endif %}
),


tmp_simplified AS (
    SELECT
        src.id,
        "date" IS NOT NULL AS valid_date,
        author IS NOT NULL AS valid_author,

        (
            tmp_content_grouped.valid_format IS NOT NULL
            AND tmp_content_grouped.valid_format
        ) AS valid_format,

        (
            -- Base spec allows many encounters and they can be Encounters or Episodes Of Care.
            -- But the US Core profile only allows exactly one Encounter.
            tmp_encounters.encounter_count IS NOT NULL
            AND tmp_encounters.encounter_count = 1
            AND tmp_encounters.valid_encounter
        ) AS valid_encounter,

        (
            {# This is basically is_period_valid() with schema-checking, since unlike most,
               this one period is a deeply nested field that our schema does not guarantee #}
            {% set period_schema = schema["context"]["period"] %}
            {% if period_schema["start"] or period_schema["end"] %}
            context.period IS NOT NULL
            AND (
                {% if period_schema["start"] %}
                context.period.start IS NOT NULL
                {% endif %}
                {% if period_schema["start"] and period_schema["end"] %}
                OR
                {% endif %}
                {% if period_schema["end"] %}
                context.period."end" IS NOT NULL
                {% endif %}
            )
            {% else %}
            FALSE
            {% endif %}
        ) AS valid_period

    FROM {{ src }} AS src
    LEFT JOIN tmp_content_grouped
    ON tmp_content_grouped.id = src.id
    LEFT JOIN tmp_encounters
    ON tmp_encounters.id = src.id
)

{%
set ns.fields = [
    'valid_date',
    'valid_author',
    'valid_format',
    'valid_encounter',
    'valid_period',
]
%}

SELECT
    id,
    {{ ns.fields|join(", ") }},
    {{ ns.fields|join(" AND ") }} AS valid
FROM tmp_simplified
